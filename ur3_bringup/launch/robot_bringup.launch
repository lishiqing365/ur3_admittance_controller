<?xml version="1.0" ?>
<launch>
  <arg name="sim" default="true" />
  <arg name="use_sim_time" default="true" />
  <arg name="paused" default="true" />
  <arg name="headless" default="false" />
  <arg name="world_name" default="$(find ur3_bringup)/worlds/empty.world" />

  <!-- UR5 arm parameters (real robot) -->
  <arg name="min_payload"  default="1.0"/>
  <arg name="max_payload"  default="3.0"/>
  <arg name="max_velocity" default="10.0"/>
  <arg name="prefix" default="ur3_arm_" />
  <arg name="base_frame" default="$(arg prefix)base" />
  <arg name="tool_frame" default="$(arg prefix)tool0_controller" />

  <!-- REAL ROBOT -->
  <group unless="$(arg sim)">
    <!-- FT sensor -->
    <node name="ft_sensor" pkg="robotiq_force_torque_sensor" 
      type="rq_sensor" respawn="true" output="screen" >
      <remap from="/robotiq_force_torque_wrench" to="/admittance_control/wrench"/>
    </node>

    <!-- Bias the F/T sensor at startup -->
    <node pkg="rosservice" type="rosservice" name="ft_sensor_biaser" 
      args="call --wait /robotiq_force_torque_sensor_acc &quot;command: 'SET_ZRO'&quot; " />

    <!-- UR3 ARM -->
    <group ns="ur3">
        <!-- Hardware interface for rso control-->
        <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver"
            output="screen" >
          <param name="robot_ip_address" type="str" value="192.168.56.1"/>
          <param name="min_payload" type="double" value="$(arg min_payload)"/>
          <param name="max_payload" type="double" value="$(arg max_payload)"/>
          <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
          <param name="use_ros_control" type="bool" value="True"/>
          <param name="servoj_gain" type="double" value="2000" />
          <param name="prefix" value="$(arg prefix)" />
          <param name="base_frame" type="str" value="$(arg base_frame)"/>
          <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
        </node>

        <!-- Convert joint states to /tf tranforms -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
          <rosparam param="publish_frequency">200</rosparam>
        </node>

        <!-- ROS control controllers -->
        <!-- joint_state_controller (to publish states, an observer) -->
        <rosparam file="$(find ur3_bringup)/controllers/joint_state_controller.yaml" command="load"/>
        <node name="joint_state_controller_spawner" pkg="controller_manager"
          type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

        <!-- arm controller (to send commands to the arm) Uses the simulated velocity control
          interface to gazebo -->
        <rosparam file="$(find ur3_bringup)/controllers/ur3_vel_controller.yaml" command="load"/>
        <node name="arm_controller_spawner" pkg="controller_manager"
            type="controller_manager" args="spawn ur3_cartesian_velocity_controller"
            respawn="false" output="screen"/>
    </group>

  </group>

  <!-- SIMULATOR -->
  <group if="$(arg sim)">
    <!-- Launch Gazebo with the specified world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="$(arg paused)" />
      <arg name="debug" value="0" />
      <arg name="gui" value="false" />
      <arg name="use_sim_time" value="$(arg use_sim_time)" />
      <arg name="headless" value="$(arg headless)" />
      <arg name="world_name" value="$(arg world_name)" />
    </include>

    <!-- FULL ROBOT DESCRIPTION -->
    <!-- For the real robot it launches at startup so we don't need to load it again --> 
    <include file="$(find ur3_description)/launch/description.launch">
    </include>

   <!-- Fake Calibration for the UR3 arm -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />

    <rosparam param="/gazebo_ros_control/pid_gains" />

    <!-- SPAWN FULL ROBOT -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -model ur3 -param robot_description -x 0.0 -y 0.0 -z 0.0" />

    <!-- FAKE FT sensor -->
    <node pkg="tf" type="static_transform_publisher" name="FT300_static"
      args="0.0 0.0 0.0 0.0 0.0 0.0 FT300_link robotiq_force_torque_frame_id 1" />

    <!-- UR3 ARM CONTROLLERS -->
    <!-- joint_state_controller (to publish states, an observer) -->
    <rosparam file="$(find ur3_bringup)/controllers/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="load joint_state_controller" respawn="false" output="screen"/>

    <!-- arm controller (to send commands to the arm) Uses the simulated velocity control
      interface to gazebo -->
    <rosparam file="$(find ur3_bringup)/controllers/ur3_vel_controller.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="load ur3_cartesian_velocity_controller_sim"
      respawn="false" output="screen"/>
  </group>
  
</launch>

