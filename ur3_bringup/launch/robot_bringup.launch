<?xml version="1.0" ?>
<launch>
  <arg name="sim" default="false" />
  <arg name="use_sim_time" default="true" />
  <arg name="F/T_sensor" default="true"/>
  <arg name="paused" default="true" />
  <arg name="headless" default="false" />
  <arg name="world_name" default="$(find ur3_bringup)/worlds/empty.world" />


  <!-- UR3 arm parameters (real robot) -->
  <!--arg name="robot_ip"  default="192.168.56.2"/>
  <arg name="min_payload"  default="0.0"/>
  <arg name="max_payload"  default="3.0"/>
  <arg name="max_velocity" default="10.0"/>
  <arg name="servoj_time" default="1000" />
  <arg name="prefix" default="ur3_arm_" />
  <arg name="base_frame" default="$(arg prefix)base" />
  <arg name="tool_frame" default="$(arg prefix)tool0_controller" />
  <arg name="robot_description_file" default="$(find ur_description)/launch/ur3_upload.launch" />
  <arg name="kinematics_config" default="$(find ur_description)/config/ur3_default.yaml" />
  <arg name="limited" default="false" /-->

  <!-- **************************REAL ROBOT***************************** -->
  <group unless="$(arg sim)">

    <node pkg="tf" type="static_transform_publisher" name="link2_broadcaster" 
      args="0 0 0 0 0 0 1 ee_link FT_link 7" />

    <!-- F/T sensor -->
    <!-- ********REAL WRENCH from F/T sensor********************** -->
    <!--include if="$(arg F/T_sensor)" file="$(find ur3_bringup)/launch/ft_sensor.launch"/-->
    <!-- ********REAL WRENCH from F/T sensor********************** -->
 
    <include file="$(find ur3_bringup)/launch/ur_force_control.launch">
      <arg name="robot_ip" value="192.168.56.2" />
    </include>

    <!-- robot model -->
  <include file="$(arg robot_description_file)">
    <arg name="limited" value="$(arg limited)"/>
    <arg name="kinematics_config" value="$(arg kinematics_config)"/>
  </include>

        <!--node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver"
            output="screen" >
          <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
          <param name="min_payload" type="double" value="$(arg min_payload)"/>
          <param name="max_payload" type="double" value="$(arg max_payload)"/>
          <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
          <param name="use_ros_control" type="bool" value="True"/>
          <param name="servoj_gain" type="double" value="$(arg servoj_time)" />
          <param name="prefix" value="$(arg prefix)" />
          <param name="base_frame" type="str" value="$(arg base_frame)"/>
          <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
        </node-->

<!-- Convert joint states to /tf tranforms -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        </node>

    <!-- ROS control controllers -->
    <!-- joint_state_controller (to publish states, an observer) -->
    <rosparam file="$(find ur3_bringup)/controllers/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

    <!-- arm controller (to send commands to the arm) Uses the simulated velocity control
      interface to gazebo -->
    <rosparam file="$(find ur3_bringup)/controllers/ur3_vel_controller.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager"
        type="controller_manager" args="spawn ur3_cartesian_velocity_controller"
        respawn="false" output="screen"/>
     <!-- 自己加载的 -->
  <node name="admittance_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" 
    output="screen" args="load ur3_cartesian_velocity_controller" />
  </group>
  <!-- **************************REAL ROBOT***************************** -->


  <!--************************** SIMULATOR ******************************-->
  <group if="$(arg sim)">
    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" 
      args="0 0 0 0 0 0 1 world base_link 7" />

    <!-- Launch Gazebo with the specified world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="$(arg paused)" />
      <arg name="debug" value="0" />
      <arg name="gui" value="false" />
      <arg name="use_sim_time" value="$(arg use_sim_time)" />
      <arg name="headless" value="$(arg headless)" />
      <arg name="world_name" value="$(arg world_name)" />
    </include>

    <!-- FULL ROBOT DESCRIPTION -->
    <!-- For the real robot it launches at startup so we don't need to load it again --> 
    <param name="robot_description" command="$(find xacro)/xacro '$(find ur3_bringup)/urdf/ur3.urdf.xacro'" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />


   <!-- Fake Calibration for the UR3 arm -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />

    <!-- SPAWN FULL ROBOT -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -model ur3 -param robot_description -x 0 -y 0 -z 0" />

    <!-- UR5 ARM CONTROLLERS -->
    <!-- joint_state_controller (to publish states, an observer) -->
    <rosparam file="$(find ur3_bringup)/controllers/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="load joint_state_controller" respawn="false" output="screen"/>

    <!-- arm controller (to send commands to the arm) Uses the simulated velocity control
      interface to gazebo -->
    <rosparam file="$(find ur3_bringup)/controllers/ur3_vel_controller.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager"
      type="controller_manager" args="load ur3_cartesian_velocity_controller_sim"
      respawn="false" output="screen"/>
  </group>
  <!--************************** SIMULATOR ******************************-->
  
</launch>

